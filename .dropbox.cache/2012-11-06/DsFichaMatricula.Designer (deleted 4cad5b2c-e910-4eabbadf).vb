'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DsFichaMatricula"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DsFichaMatricula
    Inherits System.Data.DataSet
    
    Private tablesp_Cr_FichaMatricula As sp_Cr_FichaMatriculaDataTable
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sp_Cr_FichaMatricula")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Cr_FichaMatriculaDataTable(ds.Tables("sp_Cr_FichaMatricula")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_Cr_FichaMatricula() As sp_Cr_FichaMatriculaDataTable
        Get
            Return Me.tablesp_Cr_FichaMatricula
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DsFichaMatricula = CType(MyBase.Clone,DsFichaMatricula)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("sp_Cr_FichaMatricula")) Is Nothing) Then
                MyBase.Tables.Add(New sp_Cr_FichaMatriculaDataTable(ds.Tables("sp_Cr_FichaMatricula")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesp_Cr_FichaMatricula = CType(MyBase.Tables("sp_Cr_FichaMatricula"),sp_Cr_FichaMatriculaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_Cr_FichaMatricula) Is Nothing) Then
                Me.tablesp_Cr_FichaMatricula.InitVars
            End If
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DsFichaMatricula"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DsFichaMatricula.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesp_Cr_FichaMatricula = New sp_Cr_FichaMatriculaDataTable
        MyBase.Tables.Add(Me.tablesp_Cr_FichaMatricula)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_Cr_FichaMatricula() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsFichaMatricula = New DsFichaMatricula
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub sp_Cr_FichaMatriculaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_Cr_FichaMatriculaRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_Cr_FichaMatriculaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCodigo_de_Matricula As System.Data.DataColumn
        
        Private columnFecha As System.Data.DataColumn
        
        Private columnCódigo_del_Estudiante As System.Data.DataColumn
        
        Private columnNombres_Completos As System.Data.DataColumn
        
        Private columnTipo_de_Matricula As System.Data.DataColumn
        
        Private columnEspecialidad As System.Data.DataColumn
        
        Private columnCiclo As System.Data.DataColumn
        
        Private columnTurno As System.Data.DataColumn
        
        Private columnSemestre As System.Data.DataColumn
        
        Private columnCondicion As System.Data.DataColumn
        
        Private columnEstado As System.Data.DataColumn
        
        Private columnCodigo_Curso As System.Data.DataColumn
        
        Private columnModulo As System.Data.DataColumn
        
        Private columnCurso As System.Data.DataColumn
        
        Private columnCreditos As System.Data.DataColumn
        
        Private columnHoras_Semanales As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_Cr_FichaMatricula"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_de_MatriculaColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigo_de_Matricula
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Código_del_EstudianteColumn() As System.Data.DataColumn
            Get
                Return Me.columnCódigo_del_Estudiante
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombres_CompletosColumn() As System.Data.DataColumn
            Get
                Return Me.columnNombres_Completos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_de_MatriculaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTipo_de_Matricula
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EspecialidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnEspecialidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CicloColumn() As System.Data.DataColumn
            Get
                Return Me.columnCiclo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TurnoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTurno
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SemestreColumn() As System.Data.DataColumn
            Get
                Return Me.columnSemestre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CondicionColumn() As System.Data.DataColumn
            Get
                Return Me.columnCondicion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Codigo_CursoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCodigo_Curso
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModuloColumn() As System.Data.DataColumn
            Get
                Return Me.columnModulo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CursoColumn() As System.Data.DataColumn
            Get
                Return Me.columnCurso
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreditosColumn() As System.Data.DataColumn
            Get
                Return Me.columnCreditos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Horas_SemanalesColumn() As System.Data.DataColumn
            Get
                Return Me.columnHoras_Semanales
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_Cr_FichaMatriculaRow
            Get
                Return CType(Me.Rows(index),sp_Cr_FichaMatriculaRow)
            End Get
        End Property
        
        Public Event sp_Cr_FichaMatriculaRowChanging As sp_Cr_FichaMatriculaRowChangeEventHandler
        
        Public Event sp_Cr_FichaMatriculaRowChanged As sp_Cr_FichaMatriculaRowChangeEventHandler
        
        Public Event sp_Cr_FichaMatriculaRowDeleting As sp_Cr_FichaMatriculaRowChangeEventHandler
        
        Public Event sp_Cr_FichaMatriculaRowDeleted As sp_Cr_FichaMatriculaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_Cr_FichaMatriculaRow(ByVal row As sp_Cr_FichaMatriculaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_Cr_FichaMatriculaRow(ByVal Codigo_de_Matricula As Integer, ByVal Fecha As Date, ByVal Nombres_Completos As String, ByVal Tipo_de_Matricula As String, ByVal Especialidad As String, ByVal Ciclo As String, ByVal Turno As String, ByVal Semestre As String, ByVal Condicion As String, ByVal Estado As String, ByVal Modulo As String, ByVal Curso As String, ByVal Creditos As Integer, ByVal Horas_Semanales As Integer) As sp_Cr_FichaMatriculaRow
            Dim rowsp_Cr_FichaMatriculaRow As sp_Cr_FichaMatriculaRow = CType(Me.NewRow,sp_Cr_FichaMatriculaRow)
            rowsp_Cr_FichaMatriculaRow.ItemArray = New Object() {Codigo_de_Matricula, Fecha, Nothing, Nombres_Completos, Tipo_de_Matricula, Especialidad, Ciclo, Turno, Semestre, Condicion, Estado, Nothing, Modulo, Curso, Creditos, Horas_Semanales}
            Me.Rows.Add(rowsp_Cr_FichaMatriculaRow)
            Return rowsp_Cr_FichaMatriculaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As sp_Cr_FichaMatriculaDataTable = CType(MyBase.Clone,sp_Cr_FichaMatriculaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New sp_Cr_FichaMatriculaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCodigo_de_Matricula = MyBase.Columns("Codigo de Matricula")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnCódigo_del_Estudiante = MyBase.Columns("Código del Estudiante")
            Me.columnNombres_Completos = MyBase.Columns("Nombres Completos")
            Me.columnTipo_de_Matricula = MyBase.Columns("Tipo de Matricula")
            Me.columnEspecialidad = MyBase.Columns("Especialidad")
            Me.columnCiclo = MyBase.Columns("Ciclo")
            Me.columnTurno = MyBase.Columns("Turno")
            Me.columnSemestre = MyBase.Columns("Semestre")
            Me.columnCondicion = MyBase.Columns("Condicion")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnCodigo_Curso = MyBase.Columns("Codigo Curso")
            Me.columnModulo = MyBase.Columns("Modulo")
            Me.columnCurso = MyBase.Columns("Curso")
            Me.columnCreditos = MyBase.Columns("Creditos")
            Me.columnHoras_Semanales = MyBase.Columns("Horas Semanales")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCodigo_de_Matricula = New System.Data.DataColumn("Codigo de Matricula", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnCodigo_de_Matricula.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Codigo_de_Matricula")
            Me.columnCodigo_de_Matricula.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Codigo_de_MatriculaColumn")
            Me.columnCodigo_de_Matricula.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCodigo_de_Matricula")
            Me.columnCodigo_de_Matricula.ExtendedProperties.Add("Generator_UserColumnName", "Codigo de Matricula")
            MyBase.Columns.Add(Me.columnCodigo_de_Matricula)
            Me.columnFecha = New System.Data.DataColumn("Fecha", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnCódigo_del_Estudiante = New System.Data.DataColumn("Código del Estudiante", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnCódigo_del_Estudiante.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Código_del_Estudiante")
            Me.columnCódigo_del_Estudiante.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Código_del_EstudianteColumn")
            Me.columnCódigo_del_Estudiante.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCódigo_del_Estudiante")
            Me.columnCódigo_del_Estudiante.ExtendedProperties.Add("Generator_UserColumnName", "Código del Estudiante")
            MyBase.Columns.Add(Me.columnCódigo_del_Estudiante)
            Me.columnNombres_Completos = New System.Data.DataColumn("Nombres Completos", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnNombres_Completos.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Nombres_Completos")
            Me.columnNombres_Completos.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Nombres_CompletosColumn")
            Me.columnNombres_Completos.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnNombres_Completos")
            Me.columnNombres_Completos.ExtendedProperties.Add("Generator_UserColumnName", "Nombres Completos")
            MyBase.Columns.Add(Me.columnNombres_Completos)
            Me.columnTipo_de_Matricula = New System.Data.DataColumn("Tipo de Matricula", GetType(String), Nothing, System.Data.MappingType.Element)
            Me.columnTipo_de_Matricula.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Tipo_de_Matricula")
            Me.columnTipo_de_Matricula.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Tipo_de_MatriculaColumn")
            Me.columnTipo_de_Matricula.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnTipo_de_Matricula")
            Me.columnTipo_de_Matricula.ExtendedProperties.Add("Generator_UserColumnName", "Tipo de Matricula")
            MyBase.Columns.Add(Me.columnTipo_de_Matricula)
            Me.columnEspecialidad = New System.Data.DataColumn("Especialidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEspecialidad)
            Me.columnCiclo = New System.Data.DataColumn("Ciclo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCiclo)
            Me.columnTurno = New System.Data.DataColumn("Turno", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurno)
            Me.columnSemestre = New System.Data.DataColumn("Semestre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSemestre)
            Me.columnCondicion = New System.Data.DataColumn("Condicion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCondicion)
            Me.columnEstado = New System.Data.DataColumn("Estado", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnCodigo_Curso = New System.Data.DataColumn("Codigo Curso", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnCodigo_Curso.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Codigo_Curso")
            Me.columnCodigo_Curso.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Codigo_CursoColumn")
            Me.columnCodigo_Curso.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCodigo_Curso")
            Me.columnCodigo_Curso.ExtendedProperties.Add("Generator_UserColumnName", "Codigo Curso")
            MyBase.Columns.Add(Me.columnCodigo_Curso)
            Me.columnModulo = New System.Data.DataColumn("Modulo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModulo)
            Me.columnCurso = New System.Data.DataColumn("Curso", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurso)
            Me.columnCreditos = New System.Data.DataColumn("Creditos", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreditos)
            Me.columnHoras_Semanales = New System.Data.DataColumn("Horas Semanales", GetType(Integer), Nothing, System.Data.MappingType.Element)
            Me.columnHoras_Semanales.ExtendedProperties.Add("Generator_ColumnPropNameInRow", "Horas_Semanales")
            Me.columnHoras_Semanales.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "Horas_SemanalesColumn")
            Me.columnHoras_Semanales.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnHoras_Semanales")
            Me.columnHoras_Semanales.ExtendedProperties.Add("Generator_UserColumnName", "Horas Semanales")
            MyBase.Columns.Add(Me.columnHoras_Semanales)
            Me.columnCodigo_de_Matricula.AllowDBNull = false
            Me.columnCódigo_del_Estudiante.AutoIncrement = true
            Me.columnCódigo_del_Estudiante.AllowDBNull = false
            Me.columnCódigo_del_Estudiante.ReadOnly = true
            Me.columnNombres_Completos.MaxLength = 50
            Me.columnTipo_de_Matricula.MaxLength = 50
            Me.columnEspecialidad.MaxLength = 50
            Me.columnCiclo.MaxLength = 200
            Me.columnTurno.MaxLength = 20
            Me.columnSemestre.MaxLength = 50
            Me.columnCondicion.MaxLength = 50
            Me.columnEstado.MaxLength = 50
            Me.columnCodigo_Curso.AutoIncrement = true
            Me.columnCodigo_Curso.ReadOnly = true
            Me.columnModulo.MaxLength = 50
            Me.columnCurso.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_Cr_FichaMatriculaRow() As sp_Cr_FichaMatriculaRow
            Return CType(Me.NewRow,sp_Cr_FichaMatriculaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New sp_Cr_FichaMatriculaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(sp_Cr_FichaMatriculaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_Cr_FichaMatriculaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_Cr_FichaMatriculaRowChanged(Me, New sp_Cr_FichaMatriculaRowChangeEvent(CType(e.Row,sp_Cr_FichaMatriculaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_Cr_FichaMatriculaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_Cr_FichaMatriculaRowChanging(Me, New sp_Cr_FichaMatriculaRowChangeEvent(CType(e.Row,sp_Cr_FichaMatriculaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_Cr_FichaMatriculaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_Cr_FichaMatriculaRowDeleted(Me, New sp_Cr_FichaMatriculaRowChangeEvent(CType(e.Row,sp_Cr_FichaMatriculaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_Cr_FichaMatriculaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_Cr_FichaMatriculaRowDeleting(Me, New sp_Cr_FichaMatriculaRowChangeEvent(CType(e.Row,sp_Cr_FichaMatriculaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_Cr_FichaMatriculaRow(ByVal row As sp_Cr_FichaMatriculaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsFichaMatricula = New DsFichaMatricula
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_Cr_FichaMatriculaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_Cr_FichaMatriculaRow
        Inherits System.Data.DataRow
        
        Private tablesp_Cr_FichaMatricula As sp_Cr_FichaMatriculaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_Cr_FichaMatricula = CType(Me.Table,sp_Cr_FichaMatriculaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_de_Matricula() As Integer
            Get
                Return CType(Me(Me.tablesp_Cr_FichaMatricula.Codigo_de_MatriculaColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.Codigo_de_MatriculaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.FechaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.FechaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Código_del_Estudiante() As Integer
            Get
                Return CType(Me(Me.tablesp_Cr_FichaMatricula.Código_del_EstudianteColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.Código_del_EstudianteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombres_Completos() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.Nombres_CompletosColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Nombres Completos' de la tabla 'sp_Cr_FichaMatricula' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.Nombres_CompletosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_de_Matricula() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.Tipo_de_MatriculaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Tipo de Matricula' de la tabla 'sp_Cr_FichaMatricula' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.Tipo_de_MatriculaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Especialidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.EspecialidadColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Especialidad' de la tabla 'sp_Cr_FichaMatricula' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.EspecialidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ciclo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.CicloColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Ciclo' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.CicloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Turno() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.TurnoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Turno' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.TurnoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Semestre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.SemestreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Semestre' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.SemestreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Condicion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.CondicionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Condicion' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.CondicionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.EstadoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.EstadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Codigo_Curso() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.Codigo_CursoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Codigo Curso' de la tabla 'sp_Cr_FichaMatricula' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.Codigo_CursoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modulo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.ModuloColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Modulo' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.ModuloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Curso() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.CursoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Curso' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.CursoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Creditos() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.CreditosColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Creditos' de la tabla 'sp_Cr_FichaMatricula' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.CreditosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Horas_Semanales() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_Cr_FichaMatricula.Horas_SemanalesColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Horas Semanales' de la tabla 'sp_Cr_FichaMatricula' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_Cr_FichaMatricula.Horas_SemanalesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.FechaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_Cr_FichaMatricula.FechaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombres_CompletosNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.Nombres_CompletosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombres_CompletosNull()
            Me(Me.tablesp_Cr_FichaMatricula.Nombres_CompletosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipo_de_MatriculaNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.Tipo_de_MatriculaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipo_de_MatriculaNull()
            Me(Me.tablesp_Cr_FichaMatricula.Tipo_de_MatriculaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEspecialidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.EspecialidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEspecialidadNull()
            Me(Me.tablesp_Cr_FichaMatricula.EspecialidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCicloNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.CicloColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCicloNull()
            Me(Me.tablesp_Cr_FichaMatricula.CicloColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTurnoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.TurnoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTurnoNull()
            Me(Me.tablesp_Cr_FichaMatricula.TurnoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSemestreNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.SemestreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSemestreNull()
            Me(Me.tablesp_Cr_FichaMatricula.SemestreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCondicionNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.CondicionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCondicionNull()
            Me(Me.tablesp_Cr_FichaMatricula.CondicionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.EstadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_Cr_FichaMatricula.EstadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigo_CursoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.Codigo_CursoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigo_CursoNull()
            Me(Me.tablesp_Cr_FichaMatricula.Codigo_CursoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModuloNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.ModuloColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModuloNull()
            Me(Me.tablesp_Cr_FichaMatricula.ModuloColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCursoNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.CursoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCursoNull()
            Me(Me.tablesp_Cr_FichaMatricula.CursoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreditosNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.CreditosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreditosNull()
            Me(Me.tablesp_Cr_FichaMatricula.CreditosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHoras_SemanalesNull() As Boolean
            Return Me.IsNull(Me.tablesp_Cr_FichaMatricula.Horas_SemanalesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHoras_SemanalesNull()
            Me(Me.tablesp_Cr_FichaMatricula.Horas_SemanalesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_Cr_FichaMatriculaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As sp_Cr_FichaMatriculaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_Cr_FichaMatriculaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_Cr_FichaMatriculaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DsFichaMatriculaTableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_Cr_FichaMatriculaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_Cr_FichaMatricula"
            tableMapping.ColumnMappings.Add("Codigo de Matricula", "Codigo de Matricula")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Código del Estudiante", "Código del Estudiante")
            tableMapping.ColumnMappings.Add("Nombres Completos", "Nombres Completos")
            tableMapping.ColumnMappings.Add("Tipo de Matricula", "Tipo de Matricula")
            tableMapping.ColumnMappings.Add("Especialidad", "Especialidad")
            tableMapping.ColumnMappings.Add("Ciclo", "Ciclo")
            tableMapping.ColumnMappings.Add("Turno", "Turno")
            tableMapping.ColumnMappings.Add("Semestre", "Semestre")
            tableMapping.ColumnMappings.Add("Condicion", "Condicion")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Codigo Curso", "Codigo Curso")
            tableMapping.ColumnMappings.Add("Modulo", "Modulo")
            tableMapping.ColumnMappings.Add("Curso", "Curso")
            tableMapping.ColumnMappings.Add("Creditos", "Creditos")
            tableMapping.ColumnMappings.Add("Horas Semanales", "Horas Semanales")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Matricula.Presentacion.My.MySettings.Default.db_MatriculaConnectionString
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_Cr_FichaMatricula"
            Me._commandCollection(0).CommandType = System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@RETURN_VALUE", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New System.Data.SqlClient.SqlParameter("@codigo", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 10, 0, Nothing, System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DsFichaMatricula.sp_Cr_FichaMatriculaDataTable, ByVal codigo As System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codigo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codigo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal codigo As System.Nullable(Of Integer)) As DsFichaMatricula.sp_Cr_FichaMatriculaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (codigo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(codigo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim dataTable As DsFichaMatricula.sp_Cr_FichaMatriculaDataTable = New DsFichaMatricula.sp_Cr_FichaMatriculaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
